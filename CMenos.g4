lexer grammar CMenos;
Program : DeclarationList ;
fragment DeclarationList : DeclarationList Declaration | Declaration ;
fragment Declaration : VarDeclaration | FunDeclaration ;
fragment VarDeclaration : TypeSpecifier Identifier PYC | TypeSpecifier Identifier CCT1 Literal CCT2 ;
fragment TypeSpecifier :TINT | TVOID ;
fragment FunDeclaration : TypeSpecifier Identifier PRT1 Params PRT2 CompoundStmt ;
fragment Params : ParamList | TVOID ;
fragment ParamList : ParamList COMMA Param | Param ;
fragment Param : TypeSpecifier Identifier | TypeSpecifier Identifier CCT1 CCT2 ;
fragment CompoundStmt : LLV1 LocalDeclarations StatementList LLV2 ;
fragment LocalDeclarations : LocalDeclarations VarDeclaration | Epsilon ;
fragment StatementList : StatementList Statement | Epsilon ;
fragment Statement : ExpressionStmt | CompoundStmt | SelectionStmt | IterationStmt | ReturnStmt ;
fragment ExpressionStmt : Expression COMMA | COMMA ;
fragment SelectionStmt : RIF PRT1 Expression PRT2 Statement | RIF PRT1 Expression PRT2 RElse Statement ;
fragment IterationStmt : RWhile PRT1 Expression PRT2 Statement ;
fragment ReturnStmt : RReturn COMMA | RReturn Expression ;
fragment Expression : Identifier Igual Expression | SimpleExpression ;
fragment SimpleExpression : AdditiveExpression Relop AdditiveExpression | AdditiveExpression ;
fragment Relop : Comparator ;
fragment AdditiveExpression : AdditiveExpression AddOp Term | Term ;
fragment AddOp : '+' | '-' ;
fragment Term : Term MulOp Factor ;
fragment MulOp : '*' | '/' ;
fragment Factor : PRT1 Expression PRT2 | Identifier | Call | Literal ;
fragment Call : Identifier PRT1 Args PRT2 ;
fragment Args : ArgList | Epsilon ;
fragment ArgList : ArgList COMMA Expression | Expression ;

fragment PYC: ';' ;
fragment CCT1 : '[' ;
fragment CCT2 : ']' ;
fragment PRT1 : '(' ;
fragment PRT2 : ')' ;
fragment COMMA : ',' ;
fragment LLV1 : '{' ;
fragment LLV2 : '}' ;
fragment Epsilon : 'É›' ;
fragment TINT : 'int' ;
fragment TVOID : 'void' ;
fragment RIF : 'if' ;
fragment RElse : 'else' ;
fragment RWhile : 'while' ;
fragment RReturn : 'return' ;
fragment Igual : '=' ;
fragment Comparator : '<=' | '<' | '>' | '>=' | '==' | '!=' ;
fragment Identifier : [a-zA-Z0-9]+ ;
fragment Literal : Val ;
fragment Val : [0-9]+ ;


WS : [ \t]+ -> skip ;
NEWLINE : ('\n'|'\n''\r') -> skip ;
OTHERS : . -> skip ;
